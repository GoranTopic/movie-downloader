[{"/home/telix/movie-downloader/frontend/src/index.js":"1","/home/telix/movie-downloader/frontend/src/reportWebVitals.js":"2","/home/telix/movie-downloader/frontend/src/App.js":"3","/home/telix/movie-downloader/frontend/src/theme.js":"4","/home/telix/movie-downloader/frontend/src/components/TrasnmissionList.js":"5","/home/telix/movie-downloader/frontend/src/components/MovieSearchBar.js":"6","/home/telix/movie-downloader/frontend/src/yify-cli.js":"7","/home/telix/movie-downloader/frontend/src/transmission-cli.js":"8","/home/telix/movie-downloader/frontend/src/components/SuggestionCard.js":"9","/home/telix/movie-downloader/frontend/src/components/TorrentCard.js":"10"},{"size":535,"mtime":1680157467182,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1680157467183,"results":"13","hashOfConfig":"12"},{"size":765,"mtime":1680490479280,"results":"14","hashOfConfig":"12"},{"size":794,"mtime":1680164127281,"results":"15","hashOfConfig":"12"},{"size":1833,"mtime":1680484462723,"results":"16","hashOfConfig":"12"},{"size":4723,"mtime":1680486044349,"results":"17","hashOfConfig":"12"},{"size":1228,"mtime":1680384435243,"results":"18","hashOfConfig":"12"},{"size":1373,"mtime":1680469087468,"results":"19","hashOfConfig":"12"},{"size":4244,"mtime":1680456990425,"results":"20","hashOfConfig":"12"},{"size":6173,"mtime":1680501777957,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"29ig4e",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"25"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"25"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/telix/movie-downloader/frontend/src/index.js",[],[],[],"/home/telix/movie-downloader/frontend/src/reportWebVitals.js",[],[],"/home/telix/movie-downloader/frontend/src/App.js",[],[],"/home/telix/movie-downloader/frontend/src/theme.js",[],[],"/home/telix/movie-downloader/frontend/src/components/TrasnmissionList.js",["56"],[],"import * as React from 'react';\n//import TorrentCard from './TorrentCard.js';\nimport Grid from '@mui/material/Grid';\nimport { query_torrents } from '../transmission-cli.js';\nimport TorrentCard from './TorrentCard.js';\n\nexport default function TrasnmissionList() {\n  /* this is a coponent that will be used to show the torrents and their status frmo the Trasnmission-remote client */\n    const [torrents, setTorrents] = React.useState([]);\n  // would this be loagin if there are no query result?\n\n    React.useEffect(() => {\n        /* as soon as the compnent loads,\n         * lets query transimission-remote for the list of torrents */\n        // return empty list of now \n        setInterval(async () => {\n            // query the transmission server for the list of torrents\n            let new_torrents = await query_torrents();\n            console.log(\"torrents:\", new_torrents);\n            // update the state with the new list of torrents\n            setTorrents([...new_torrents]);\n        }, 20000);\n    }, []);\n\n    // delete torrent from transmission server\n    const deleteTorrent = async torrent_id => {\n        // delete the torrent from the transmission server\n        //let res = await trasmission_delete_torrent(torrent_id);\n        //console.log('res:', res);\n    }\n\n\n    return <>\n        <Grid container\n            sx={{ marginTop: 2 }}\n            columns={{ xs: 1, sm: 1, md: 12, lg: 12, xl: 14 }}\n            direction=\"column\" justifyContent=\"space-evenly\"\n            rowSpacing={5}>\n            { /* for each torrent map to torent card */}\n            {torrents.map(torrent => <TorrentCard\n                key={torrent.id}\n                torrent={torrent}\n            //deleteTorrent={deleteTorrent}\n            //downloadTorrent={downloadTorrent}\n            />\n            )}\n        </Grid>\n    </>\n}\n","/home/telix/movie-downloader/frontend/src/components/MovieSearchBar.js",["57"],[],"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { query_movie_suggestions } from '../yify-cli.js';\nimport SuggestionCard from './SuggestionCard.js';\nimport { transmision_add_torrent } from '../transmission-cli.js';\n\nexport default function MovieSearchBar() {\n    /* this is the companent that will be used to search for a movie using the yify api\n     * when a movie is selecte it donwload the torrent file and passes it to \n     * transmission-remote client*/\n    //  variables to handle the search bar states\n    // open: is the search bar open\n    const [open, setOpen] = React.useState(false);\n    // suggestions: is the list of suggestions queries form the yify \n    const [suggestions, setSuggestions] = React.useState([]);\n    // textValue: is the value of the text search\n    const [textValue, setTextValue] = React.useState(\"\");\n    // loading: is wether is qeuring search bar loading\n    const [loading, setLoading] = React.useState(false);\n    // would this be loagin if there are no query result?\n\n    React.useEffect(() => {\n        // set as active?\n        let active = true;\n        // if(textValue) active = true;\n        (async () => {\n            if (active && textValue !== \"\") {\n                //console.log(\"search query:\", textValue);\n                setLoading(true);\n                // query suggestions\n                let suggestions = await query_movie_suggestions(textValue);\n                //console.log(\"got search suggestions:\", quotes);\n                setSuggestions(suggestions);\n                    // get only the suggestions that are not already in the list\n                    //let suggestions_id = s.map(s => s.id);\n                    //let new_suggestions = suggestions.filter(s => !suggestions_id.includes(s.id));\n                    //return [...s, ...new_suggestions];\n                //});\n                setOpen(true);\n                setLoading(false);\n            }\n        })();\n        // return a function that will be called when the component is unmounted\n        return () => { active = false; };\n        // every time the textValue changes\n    }, [textValue]);\n\n    const selectTorrent = async (torrent, quality) => {\n        /* this function uses the selected movie suggestion to download the torrent file\n         * and pass it to transmission-remote client*/\n        // clear the search bar\n        setTextValue('');\n        // close the search bar\n        setOpen(false);\n        // start loading\n        setLoading(true);\n        // clear the suggestions\n        setSuggestions([]);\n        console.log(\"torret:\", torrent);\n        console.log(\"quality:\", quality);\n        // send the torrent to the transmission server to download\n        let res = await transmision_add_torrent(torrent, quality);\n        // stop loading\n        setLoading(false);\n    }\n\n    return <>\n        <Autocomplete\n            sx={{ marginX: \"5%\", marginTop: \"5%\" }}\n            id=\"Stock Search\"\n            autoHighlight\n            open={open}\n            onOpen={() => ((suggestions.length > 0) && setOpen(true))}\n            onClose={() => setOpen(false)}\n            // this is the list of suggestion\n            options={suggestions}\n            // this is the function get a label from a suggestion\n            getOptionLabel={suggestion => suggestion.title}\n            // this render the suggestion\n            renderOption={(event, suggestion) =>\n                <SuggestionCard\n                    key={suggestion.id}\n                    suggestion={suggestion}\n                    selectTorrent={selectTorrent} />\n            }\n            // change value of the text search\n            inputValue={textValue}\n            // when the text search changes\n            onInputChange={event => (event && event?.target?.value !== null) && setTextValue(event.target.value)}\n            // loading state\n            loading={loading}\n            // this is the textinput component of the search bar\n            renderInput={params => (\n                <TextField\n                    {...params}\n                    label=\"Search Movie\"\n                    InputProps={{\n                        ...params.InputProps,\n                        endAdornment: (\n                            <React.Fragment>\n                                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                                {params.InputProps.endAdornment}\n                            </React.Fragment>\n                        ),\n                    }}\n                />\n            )}\n        />\n    </>\n}\n","/home/telix/movie-downloader/frontend/src/yify-cli.js",[],[],"/home/telix/movie-downloader/frontend/src/transmission-cli.js",[],[],"/home/telix/movie-downloader/frontend/src/components/SuggestionCard.js",["58"],[],"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport FileDownloadIcon from '@mui/icons-material/FileDownload';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\n\n\nexport default function SuggestionCard({ suggestion, selectTorrent }) {\n\n    const choose_default_torrent = suggestion => {\n        // this function will choses the torrent with the 1080p quality if there is as default\n        // else it will chose the first torrent in the list\n        let default_torrent = suggestion.torrents[0];\n        for (let torrent of suggestion.torrents) {\n            if (torrent.quality === \"1080p\") {\n                return default_torrent = torrent;\n            }\n        }\n        return default_torrent;\n    }\n\n    // the torrent url to pass to the transmission client\n    const [torrent, setTorrent] = React.useState(choose_default_torrent(suggestion));\n    const [url, setUrl] = React.useState(choose_default_torrent(suggestion).url);\n    // set the 1080 torrent as the default as soon as it loads\n\n    const handleChange = event => {\n        console.log('value:', event.target.value);\n        let torrent = suggestion.torrents.filter(torrent => torrent.url === event.target.value)[0];\n        setTorrent(torrent);\n        setUrl(torrent.url);\n    };\n\n    return (\n        <Card sx={{ display: 'flex' }}>\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\n                <CardMedia\n                    component=\"img\"\n                    sx={{ width: 51 }}\n                    image={suggestion.small_cover_image}\n                    alt={suggestion.title}\n                />\n                <CardContent sx={{ flex: '1 0 auto' }}>\n                    <Typography component=\"div\" > {suggestion.title} </Typography>\n                    <Typography variant=\"subtitle1\" color=\"text.secondary\" component=\"div\">\n                        ({suggestion.year}) - {suggestion.rating} - {suggestion.language} -\n                        {suggestion.genres ? suggestion.genres.map(genre => genre + \" \") : \"\"}\n                    </Typography>\n                </CardContent>\n                {/* add imbd icon button link */}\n                <FormControl>\n                    <Box sx={{ display: 'flex', alignSelf: 'right', alignItems: 'center', pl: 1, pb: 1 }}>\n                        <RadioGroup aria-label=\"quality\" name=\"quality\"\n                            onChange={e => handleChange(e)}\n                            defaultValue={choose_default_torrent(suggestion).url}>\n                            {suggestion.torrents.map(torrent =>\n                                <FormControlLabel\n                                    key={torrent.url}\n                                    value={torrent.url}\n                                    size=\"small\"\n                                    label={<Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                                        <Typography variant=\"subtitle2\" fontSize={16} p={0.2}> {torrent.type} </Typography>\n                                        <Typography variant=\"subtitle2\" fontSize={16} p={0.2}> {torrent.quality} </Typography>\n                                        <Typography variant=\"subtitle2\" fontSize={16} p={0.2}> {torrent.size} </Typography>\n                                    </Box>}\n                                    control={<Radio />}\n                                />\n                            )}\n                        </RadioGroup>\n                        <IconButton \n                            aria-label=\"download\" \n                            onClick={() => selectTorrent(suggestion, torrent)}>\n                            <FileDownloadIcon sx={{ height: 38, width: 38 }} />\n                        </IconButton>\n                    </Box>\n                </FormControl>\n            </Box>\n        </Card>\n    );\n}","/home/telix/movie-downloader/frontend/src/components/TorrentCard.js",[],[],{"ruleId":"59","severity":1,"message":"60","line":26,"column":11,"nodeType":"61","messageId":"62","endLine":26,"endColumn":24},{"ruleId":"59","severity":1,"message":"63","line":64,"column":13,"nodeType":"61","messageId":"62","endLine":64,"endColumn":16},{"ruleId":"59","severity":1,"message":"64","line":31,"column":12,"nodeType":"61","messageId":"62","endLine":31,"endColumn":15},"no-unused-vars","'deleteTorrent' is assigned a value but never used.","Identifier","unusedVar","'res' is assigned a value but never used.","'url' is assigned a value but never used."]