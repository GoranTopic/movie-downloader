{"ast":null,"code":"var _jsxFileName = \"/home/telix/movie-downloader/src/components/charts/AreaChart.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { createChart } from \"lightweight-charts\";\nimport { resizesChart, options } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = [{\n  // cyan\n  topColor: 'rgba(38,198,218, 0.56)',\n  bottomColor: 'rgba(38,198,218, 0.04)',\n  lineColor: 'rgba(38,198,218, 1)'\n}, {\n  // yellow\n  topColor: 'rgba(255, 192, 0, 0.7)',\n  bottomColor: 'rgba(255, 192, 0, 0.3)',\n  lineColor: 'rgba(255, 192, 0, 1)'\n}, {\n  // green\n  topColor: 'rgba(76, 175, 80, 0.5)',\n  lineColor: 'rgba(76, 175, 80, 1)',\n  bottomColor: 'rgba(76, 175, 80, 0)'\n}, {\n  // purple\n  topColor: 'rgba(156, 39, 176, 1)',\n  bottomColor: 'rgba(41, 121, 255, 0.1)',\n  lineColor: 'rgba(156, 39, 176, 0.8)'\n}, {\n  // orange\n  topColor: 'rgba(245, 124, 0, 0.4)',\n  bottomColor: 'rgba(245, 124, 0, 0.1)',\n  lineColor: 'rgba(245, 124, 0, 1)'\n}];\nexport default function AreaChart(_ref) {\n  _s();\n  let {\n    areaData,\n    labels\n  } = _ref;\n  const chartContainerRef = React.useRef();\n  const resizeObserver = React.useRef();\n  const chart = React.useRef();\n  //console.log('areaData:', areaData)\n  //console.log('is array areaData:', Array.isArray(areaData))\n\n  React.useEffect(() => {\n    if (chart.current === undefined) {\n      // use effect might run twice\n      chart.current = createChart(chartContainerRef.current, options(chartContainerRef));\n      if (Array.isArray(areaData) && areaData.length > 0) {\n        // if it is a aray of arrays\n        if (areaData.every(data => Array.isArray(data))) {\n          // make a series of every array\n          areaData.forEach((data, i) => {\n            let areaSeries = chart.current.addAreaSeries({\n              ...colors[i],\n              lineWidth: 2\n            });\n            areaSeries.setData(data);\n          });\n          // if it is an array of objects\n        } else if (areaData.every(data => typeof (data === null || data === void 0 ? void 0 : data.time) === 'number' && typeof (data === null || data === void 0 ? void 0 : data.value) === 'number')) {\n          // if only one data is passed\n          let areaSeries = chart.current.addAreaSeries({\n            ...colors[0],\n            lineWidth: 2\n          });\n          areaSeries.setData(areaData);\n          // if now is passed\n        } else throw new Error(`Passed must be an array of objects of the form { time, value } or and array of arrays`);\n        //if not a array passed\n      } else throw new Error(`Passed paramter to AreaChart is not an array`);\n      // handle mutiple areaData lines\n    }\n  }, []);\n\n  // Resize chart on container resizes.\n  React.useEffect(resizesChart(resizeObserver, chart, chartContainerRef), []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartContainerRef,\n    style: {\n      height: \"100%\",\n      width: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 12\n  }, this);\n}\n_s(AreaChart, \"GY3KtnL3nJdYtMfra2i6RJB8DpE=\");\n_c = AreaChart;\nvar _c;\n$RefreshReg$(_c, \"AreaChart\");","map":{"version":3,"names":["React","createChart","resizesChart","options","jsxDEV","_jsxDEV","colors","topColor","bottomColor","lineColor","AreaChart","_ref","_s","areaData","labels","chartContainerRef","useRef","resizeObserver","chart","useEffect","current","undefined","Array","isArray","length","every","data","forEach","i","areaSeries","addAreaSeries","lineWidth","setData","time","value","Error","ref","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/telix/movie-downloader/src/components/charts/AreaChart.js"],"sourcesContent":["import * as React from 'react';\nimport { createChart } from \"lightweight-charts\";\nimport { resizesChart, options } from './utils'\n\nconst colors = [\n    { // cyan\n        topColor: 'rgba(38,198,218, 0.56)',\n        bottomColor: 'rgba(38,198,218, 0.04)',\n        lineColor: 'rgba(38,198,218, 1)',\n    }, { // yellow\n        topColor: 'rgba(255, 192, 0, 0.7)',\n        bottomColor: 'rgba(255, 192, 0, 0.3)',\n        lineColor: 'rgba(255, 192, 0, 1)',\n    }, { // green\n        topColor: 'rgba(76, 175, 80, 0.5)',\n        lineColor: 'rgba(76, 175, 80, 1)',\n        bottomColor: 'rgba(76, 175, 80, 0)',\n    }, { // purple\n        topColor: 'rgba(156, 39, 176, 1)',\n        bottomColor: 'rgba(41, 121, 255, 0.1)',\n        lineColor: 'rgba(156, 39, 176, 0.8)'\n    }, { // orange\n        topColor: 'rgba(245, 124, 0, 0.4)',\n        bottomColor: 'rgba(245, 124, 0, 0.1)',\n        lineColor: 'rgba(245, 124, 0, 1)',\n    }\n]\n\nexport default function AreaChart({ areaData, labels }) {\n    const chartContainerRef = React.useRef();\n    const resizeObserver = React.useRef();\n    const chart = React.useRef();\n    //console.log('areaData:', areaData)\n    //console.log('is array areaData:', Array.isArray(areaData))\n\n    React.useEffect(() => {\n        if (chart.current === undefined) { // use effect might run twice\n            chart.current = createChart(\n                chartContainerRef.current,\n                options(chartContainerRef),\n            );\n            if (Array.isArray(areaData) && areaData.length > 0) {\n                // if it is a aray of arrays\n                if (areaData.every(data => Array.isArray(data))) {\n                    // make a series of every array\n                    areaData.forEach((data, i) => {\n                        let areaSeries = chart.current.addAreaSeries({\n                            ...colors[i],\n                            lineWidth: 2,\n                        });\n                        areaSeries.setData(data);\n                    });\n                    // if it is an array of objects\n                } else if (areaData.every(data => (typeof(data?.time) ==='number' && typeof(data?.value) === 'number'))) {\n                    // if only one data is passed\n                    let areaSeries = chart.current.addAreaSeries({\n                        ...colors[0],\n                        lineWidth: 2,\n                    });\n                    areaSeries.setData(areaData);\n                    // if now is passed\n                } else throw new Error(`Passed must be an array of objects of the form { time, value } or and array of arrays`)\n                //if not a array passed\n            } else throw new Error(`Passed paramter to AreaChart is not an array`)\n            // handle mutiple areaData lines\n        }\n    }, []);\n\n    // Resize chart on container resizes.\n    React.useEffect(resizesChart(resizeObserver, chart, chartContainerRef), []);\n    return <div ref={chartContainerRef} style={{ height: \"100%\", width: \"100%\" }}\n    />\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}