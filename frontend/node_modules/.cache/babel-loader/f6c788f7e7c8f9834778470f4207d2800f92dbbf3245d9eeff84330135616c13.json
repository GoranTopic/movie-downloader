{"ast":null,"code":"var _jsxFileName = \"/home/telix/movie-downloader/src/components/SearchBar.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { Box } from '@mui/system';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { query_search } from '../queries/query_yahoo.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AsycnSearchBar(_ref) {\n  _s();\n  let {\n    selectStock\n  } = _ref;\n  /* this is the companent that handles the queries for stock to the api,\n   and options presented */\n  const [open, setOpen] = React.useState(false);\n  const [options, setOptions] = React.useState([]);\n  const [textValue, setTextValue] = React.useState(\"\");\n  const [loading, setLoading] = React.useState(false);\n  // would this be loagin if there are no query result?\n\n  React.useEffect(() => {\n    let active = true;\n    // if(textValue) active = true;\n    (async () => {\n      if (active && textValue !== \"\") {\n        //console.log(\"search query:\", textValue);\n        setLoading(true);\n        let response = await query_search(textValue);\n        let quotes = response.quotes;\n        // filter future quotes\n        quotes = quotes.filter(q => q.quoteType === \"EQUITY\");\n        //console.log(\"got search suggestions:\", quotes);\n        setOptions([...quotes]);\n        setOpen(true);\n        setLoading(false);\n      }\n    })();\n    return () => {\n      active = false;\n    };\n  }, [textValue]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      sx: {\n        marginX: \"5%\"\n      },\n      id: \"Stock Search\",\n      autoHighlight: true,\n      open: open,\n      onOpen: () => options.length > 0 && setOpen(true),\n      onClose: () => setOpen(false),\n      getOptionLabel: option => option.symbol + \" - \" + option.shortname\n      // selected stock\n      ,\n      onChange: (event, stock) => {\n        if (!stock) throw new Error(`Could not find stock for ${stock} `);\n        setTextValue('');\n        selectStock(stock);\n        setOpen(false);\n      }\n      // change value of the text search \n      ,\n      inputValue: textValue,\n      onInputChange: event => {\n        var _event$target;\n        return event && (event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value) !== null && setTextValue(event.target.value);\n      }\n      // this is the list of suggestion\n      ,\n      options: options,\n      loading: loading,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        ...params,\n        label: \"Search\",\n        InputProps: {\n          ...params.InputProps,\n          endAdornment: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              color: \"inherit\",\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 28\n            }, this) : null, params.InputProps.endAdornment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(AsycnSearchBar, \"X2ddT/0ROQB6ywZurl0/QO00nio=\");\n_c = AsycnSearchBar;\nvar _c;\n$RefreshReg$(_c, \"AsycnSearchBar\");","map":{"version":3,"names":["React","Box","TextField","Autocomplete","CircularProgress","query_search","jsxDEV","_jsxDEV","Fragment","_Fragment","AsycnSearchBar","_ref","_s","selectStock","open","setOpen","useState","options","setOptions","textValue","setTextValue","loading","setLoading","useEffect","active","response","quotes","filter","q","quoteType","children","sx","marginX","id","autoHighlight","onOpen","length","onClose","getOptionLabel","option","symbol","shortname","onChange","event","stock","Error","inputValue","onInputChange","_event$target","target","value","renderInput","params","label","InputProps","endAdornment","color","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/telix/movie-downloader/src/components/SearchBar.js"],"sourcesContent":["import * as React from 'react';\nimport { Box } from '@mui/system';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { query_search } from '../queries/query_yahoo.js'\n\nexport default function AsycnSearchBar({selectStock}) {\n  /* this is the companent that handles the queries for stock to the api,\n   and options presented */\n  const [open, setOpen] = React.useState(false);\n  const [options, setOptions] = React.useState([]);\n  const [textValue, setTextValue] = React.useState(\"\");\n  const [loading, setLoading] = React.useState(false);\n  // would this be loagin if there are no query result?\n\n  React.useEffect(() => {\n    let active = true;\n    // if(textValue) active = true;\n    (async () => {\n      if (active && textValue !== \"\") {\n        //console.log(\"search query:\", textValue);\n        setLoading(true);\n        let response = await query_search(textValue);\n        let quotes = response.quotes;\n        // filter future quotes\n        quotes = quotes.filter(q=> q.quoteType === \"EQUITY\")\n        //console.log(\"got search suggestions:\", quotes);\n        setOptions([...quotes]);\n        setOpen(true);\n        setLoading(false);\n      }\n    })();\n    return () => { active = false; };\n  }, [textValue]);\n\n  return <>\n    <Autocomplete\n      sx={{ marginX: \"5%\" }}\n      id=\"Stock Search\"\n      autoHighlight\n      open={open}\n      onOpen={() => ((options.length > 0) && setOpen(true))}\n      onClose={() => setOpen(false)}\n      getOptionLabel={option => (option.symbol + \" - \" + option.shortname)}\n      // selected stock\n      onChange={(event, stock) => {\n        if (!stock) throw new Error(`Could not find stock for ${stock} `);\n        setTextValue('');\n        selectStock(stock);\n        setOpen(false);\n      }}\n      // change value of the text search \n      inputValue={textValue}\n      onInputChange={event => (event && event?.target?.value !== null) && setTextValue(event.target.value)}\n      // this is the list of suggestion\n      options={options}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Search\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n    />\n  </>\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}