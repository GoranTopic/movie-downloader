{"ast":null,"code":"var _jsxFileName = \"/home/telix/movie-downloader/src/components/MovieSearchBar.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { query_movie_suggestions } from '../yify-cli.js';\nimport SuggestionCard from './SuggestionCard.js';\n//import { transmision_add_torrent } from './transmission-client.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MovieSearchBar() {\n  _s();\n  /* this is the companent that will be used to search for a movie using the yify api\n   * when a movie is selecte it donwload the torrent file and passes it to \n   * transmission-remote client*/\n  //  variables to handle the search bar states\n  // open: is the search bar open\n  const [open, setOpen] = React.useState(false);\n  // suggestions: is the list of suggestions queries form the yify \n  const [suggestions, setSuggestions] = React.useState([]);\n  // textValue: is the value of the text search\n  const [textValue, setTextValue] = React.useState(\"\");\n  // loading: is wether is qeuring search bar loading\n  const [loading, setLoading] = React.useState(false);\n  // would this be loagin if there are no query result?\n\n  React.useEffect(() => {\n    // set as active?\n    let active = true;\n    // if(textValue) active = true;\n    (async () => {\n      if (active && textValue !== \"\") {\n        //console.log(\"search query:\", textValue);\n        setLoading(true);\n        // query suggestions\n        let suggestions = await query_movie_suggestions(textValue);\n        //console.log(\"got search suggestions:\", quotes);\n        setSuggestions([...suggestions]);\n        setOpen(true);\n        setLoading(false);\n      }\n    })();\n    // return a function that will be called when the component is unmounted\n    return () => {\n      active = false;\n    };\n    // every time the textValue changes\n  }, [textValue]);\n  const selectTorrent = torrent_url => {\n    /* this function uses the selected movie suggestion to download the torrent file\n     * and pass it to transmission-remote client*/\n    setTextValue('');\n    setOpen(false);\n    setSuggestions([]);\n    console.log(\"torret_url\", torrent_url);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      sx: {\n        marginX: \"5%\"\n      },\n      id: \"Stock Search\",\n      autoHighlight: true,\n      open: open,\n      onOpen: () => suggestions.length > 0 && setOpen(true),\n      onClose: () => setOpen(false)\n      // this is the list of suggestion\n      ,\n      options: suggestions\n      // this is the function get a label from a suggestion\n      ,\n      getOptionLabel: suggestion => suggestion.title\n      // this render the suggestion\n      ,\n      renderOption: (event, suggestion) => /*#__PURE__*/_jsxDEV(SuggestionCard, {\n        suggestion: suggestion,\n        selectTorrent: selectTorrent\n      }, suggestion.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n      // change value of the text search\n      ,\n      inputValue: textValue\n      // when the text search changes\n      ,\n      onInputChange: event => {\n        var _event$target;\n        return event && (event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value) !== null && setTextValue(event.target.value);\n      }\n      // loading state\n      ,\n      loading: loading\n      // this is the textinput component of the search bar\n      ,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        ...params,\n        label: \"Search Movie\",\n        InputProps: {\n          ...params.InputProps,\n          endAdornment: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              color: \"inherit\",\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 44\n            }, this) : null, params.InputProps.endAdornment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(MovieSearchBar, \"dEh4FU7aQ1smZo7gU4xvFpoCmBg=\");\n_c = MovieSearchBar;\nvar _c;\n$RefreshReg$(_c, \"MovieSearchBar\");","map":{"version":3,"names":["React","TextField","Autocomplete","CircularProgress","query_movie_suggestions","SuggestionCard","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieSearchBar","_s","open","setOpen","useState","suggestions","setSuggestions","textValue","setTextValue","loading","setLoading","useEffect","active","selectTorrent","torrent_url","console","log","children","sx","marginX","id","autoHighlight","onOpen","length","onClose","options","getOptionLabel","suggestion","title","renderOption","event","fileName","_jsxFileName","lineNumber","columnNumber","inputValue","onInputChange","_event$target","target","value","renderInput","params","label","InputProps","endAdornment","color","size","_c","$RefreshReg$"],"sources":["/home/telix/movie-downloader/src/components/MovieSearchBar.js"],"sourcesContent":["import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { query_movie_suggestions } from '../yify-cli.js';\nimport SuggestionCard from './SuggestionCard.js';\n//import { transmision_add_torrent } from './transmission-client.js';\n\nexport default function MovieSearchBar() {\n    /* this is the companent that will be used to search for a movie using the yify api\n     * when a movie is selecte it donwload the torrent file and passes it to \n     * transmission-remote client*/\n    //  variables to handle the search bar states\n    // open: is the search bar open\n    const [open, setOpen] = React.useState(false);\n    // suggestions: is the list of suggestions queries form the yify \n    const [suggestions, setSuggestions] = React.useState([]);\n    // textValue: is the value of the text search\n    const [textValue, setTextValue] = React.useState(\"\");\n    // loading: is wether is qeuring search bar loading\n    const [loading, setLoading] = React.useState(false);\n    // would this be loagin if there are no query result?\n\n    React.useEffect(() => {\n        // set as active?\n        let active = true;\n        // if(textValue) active = true;\n        (async () => {\n            if (active && textValue !== \"\") {\n                //console.log(\"search query:\", textValue);\n                setLoading(true);\n                // query suggestions\n                let suggestions = await query_movie_suggestions(textValue);\n                //console.log(\"got search suggestions:\", quotes);\n                setSuggestions([...suggestions]);\n                setOpen(true);\n                setLoading(false);\n            }\n        })();\n        // return a function that will be called when the component is unmounted\n        return () => { active = false; };\n        // every time the textValue changes\n    }, [textValue]);\n\n    const selectTorrent = torrent_url => {\n        /* this function uses the selected movie suggestion to download the torrent file\n         * and pass it to transmission-remote client*/\n        setTextValue('');\n        setOpen(false);\n        setSuggestions([]);\n        console.log(\"torret_url\", torrent_url);\n    }\n\n\n    return <>\n        <Autocomplete\n            sx={{ marginX: \"5%\" }}\n            id=\"Stock Search\"\n            autoHighlight\n            open={open}\n            onOpen={() => ((suggestions.length > 0) && setOpen(true))}\n            onClose={() => setOpen(false)}\n            // this is the list of suggestion\n            options={suggestions}\n            // this is the function get a label from a suggestion\n            getOptionLabel={suggestion => suggestion.title}\n            // this render the suggestion\n            renderOption={(event, suggestion) =>\n                <SuggestionCard\n                    key={suggestion.id}\n                    suggestion={suggestion}\n                    selectTorrent={selectTorrent} />\n            }\n            // change value of the text search\n            inputValue={textValue}\n            // when the text search changes\n            onInputChange={event => (event && event?.target?.value !== null) && setTextValue(event.target.value)}\n            // loading state\n            loading={loading}\n            // this is the textinput component of the search bar\n            renderInput={params => (\n                <TextField\n                    {...params}\n                    label=\"Search Movie\"\n                    InputProps={{\n                        ...params.InputProps,\n                        endAdornment: (\n                            <React.Fragment>\n                                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                                {params.InputProps.endAdornment}\n                            </React.Fragment>\n                        ),\n                    }}\n                />\n            )}\n        />\n    </>\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}