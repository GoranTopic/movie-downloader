{"ast":null,"code":"import axios from 'axios';\nimport doenv from 'dotenv';\ndoenv.config();\n\n// yify api endpoint\nvar endpoint = process.env.YIFY || 'https://yts.lt/api/v2/';\n\n// cors proxy\nvar cors_proxy = process.env.CORS_PROXY || 'http://147.182.241.239:4236';\n\n// super secret token, don't share =P \nvar token = process.env.CORS_TOKEN || '5df54d27-26d0-43ce-aef1-34d71e0b0dbb';\n\n// print env variables\nconsole.log(process.env);\nconst query_movie_suggestions = async key => {\n  console.log(\"querying movie suggestions:\", key);\n  try {\n    const {\n      data\n    } = await axios.get(`${cors_proxy}/${endpoint}/list_movies.json`, {\n      params: {\n        query_term: key\n      },\n      headers: {\n        token\n      } // token for the cors proxy\n    });\n\n    if (data.status === 'ok') if (data.data.movies) {\n      console.log(\"got movie suggestions:\", data.data.movies);\n      return data.data.movies;\n    } else return [];\n    throw new Error(data.status_message);\n  } catch (err) {\n    console.error(err);\n    throw new Error('Something went wrong');\n  }\n};\nexport { query_movie_suggestions };","map":{"version":3,"names":["axios","doenv","config","endpoint","process","env","YIFY","cors_proxy","CORS_PROXY","token","CORS_TOKEN","console","log","query_movie_suggestions","key","data","get","params","query_term","headers","status","movies","Error","status_message","err","error"],"sources":["/home/telix/movie-downloader/frontend/src/yify-cli.js"],"sourcesContent":["import axios from 'axios';\nimport doenv from 'dotenv';\ndoenv.config();\n\n// yify api endpoint\nvar endpoint = process.env.YIFY || 'https://yts.lt/api/v2/';\n\n// cors proxy\nvar cors_proxy = process.env.CORS_PROXY || 'http://147.182.241.239:4236';\n\n// super secret token, don't share =P \nvar token = process.env.CORS_TOKEN || '5df54d27-26d0-43ce-aef1-34d71e0b0dbb';\n\n// print env variables\nconsole.log(process.env)\n\n\nconst query_movie_suggestions = async key => {\n  console.log(\"querying movie suggestions:\", key)\n  try {\n    const { data } = await axios\n      .get(`${cors_proxy}/${endpoint}/list_movies.json`, {\n        params: { query_term: key },\n        headers: { token } // token for the cors proxy\n      })\n    if (data.status === 'ok')\n      if (data.data.movies) {\n        console.log(\"got movie suggestions:\", data.data.movies)\n        return data.data.movies;\n      }\n      else\n        return []\n    throw new Error(data.status_message);\n  } catch (err) {\n    console.error(err)\n    throw new Error('Something went wrong');\n  }\n}\n\n\nexport { query_movie_suggestions  }\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,QAAQ;AAC1BA,KAAK,CAACC,MAAM,EAAE;;AAEd;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,IAAI,IAAI,wBAAwB;;AAE3D;AACA,IAAIC,UAAU,GAAGH,OAAO,CAACC,GAAG,CAACG,UAAU,IAAI,6BAA6B;;AAExE;AACA,IAAIC,KAAK,GAAGL,OAAO,CAACC,GAAG,CAACK,UAAU,IAAI,sCAAsC;;AAE5E;AACAC,OAAO,CAACC,GAAG,CAACR,OAAO,CAACC,GAAG,CAAC;AAGxB,MAAMQ,uBAAuB,GAAG,MAAMC,GAAG,IAAI;EAC3CH,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEE,GAAG,CAAC;EAC/C,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMf,KAAK,CACzBgB,GAAG,CAAE,GAAET,UAAW,IAAGJ,QAAS,mBAAkB,EAAE;MACjDc,MAAM,EAAE;QAAEC,UAAU,EAAEJ;MAAI,CAAC;MAC3BK,OAAO,EAAE;QAAEV;MAAM,CAAC,CAAC;IACrB,CAAC,CAAC;;IACJ,IAAIM,IAAI,CAACK,MAAM,KAAK,IAAI,EACtB,IAAIL,IAAI,CAACA,IAAI,CAACM,MAAM,EAAE;MACpBV,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEG,IAAI,CAACA,IAAI,CAACM,MAAM,CAAC;MACvD,OAAON,IAAI,CAACA,IAAI,CAACM,MAAM;IACzB,CAAC,MAEC,OAAO,EAAE;IACb,MAAM,IAAIC,KAAK,CAACP,IAAI,CAACQ,cAAc,CAAC;EACtC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZb,OAAO,CAACc,KAAK,CAACD,GAAG,CAAC;IAClB,MAAM,IAAIF,KAAK,CAAC,sBAAsB,CAAC;EACzC;AACF,CAAC;AAGD,SAAST,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}