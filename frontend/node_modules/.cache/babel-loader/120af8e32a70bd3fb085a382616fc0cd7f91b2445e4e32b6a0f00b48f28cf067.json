{"ast":null,"code":"var _jsxFileName = \"/home/telix/movie-downloader/src/components/cardContent/WACCContent.js\";\nimport * as React from 'react';\nimport moment from 'moment';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { createTheme, responsiveFontSizes, ThemeProvider } from '@mui/material/styles';\nimport { Box } from '@mui/system';\nimport stylize from '../../utils/stylize';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCardContent = stylize(CardContent, _ref => {\n  let {\n    theme,\n    $expand\n  } = _ref;\n  return {\n    transition: theme.transitions.create(['transform', 'width', 'height'], {\n      duration: theme.transitions.duration.standard\n    }),\n    // auto does not allow css transitions, bummer.\n    // but auto is key so tidoesnot overflow in the phone size\n    textAlign: 'left',\n    maxWidth: 1200,\n    transform: $expand ? 'scale(1)' : 'scale(0.8)',\n    width: $expand ? '80vw' : 300,\n    height: $expand ? 'auto' : 150\n  };\n});\n_c = StyledCardContent;\nvar theme = createTheme();\ntheme = responsiveFontSizes(theme);\nexport default function DocContent(_ref2) {\n  var _stock$balanceSheet$l, _stock$balanceSheet$s, _stock$balanceSheet$c, _stock$balanceSheet$c2, _stock$balanceSheet$c3, _stock$quoteSummary$f, _stock$quoteSummary$d, _stock$quoteSummary$d2, _indicators$adjclose$;\n  let {\n    expand,\n    stocks\n  } = _ref2;\n  let stock = stocks.at(0);\n  let totalLiab = stock.balanceSheet['totalLiab']['longFmt'];\n  let totalAssets = stock.balanceSheet['totalAssets']['longFmt'];\n  let totalEquity = stock.balanceSheet['totalAssets']['raw'] - stock.balanceSheet['totalLiab']['raw'];\n  //console.log(\"totalEquity:\", totalEquity)\n\n  let longTermDebt = (_stock$balanceSheet$l = stock.balanceSheet['longTermDebt']) === null || _stock$balanceSheet$l === void 0 ? void 0 : _stock$balanceSheet$l.raw;\n  let shortTermDebt = (_stock$balanceSheet$s = stock.balanceSheet['shortLongTermDebt']) === null || _stock$balanceSheet$s === void 0 ? void 0 : _stock$balanceSheet$s.raw;\n  let cash = (_stock$balanceSheet$c = (_stock$balanceSheet$c2 = stock.balanceSheet['cash']) === null || _stock$balanceSheet$c2 === void 0 ? void 0 : _stock$balanceSheet$c2.longFmt) !== null && _stock$balanceSheet$c !== void 0 ? _stock$balanceSheet$c : (_stock$balanceSheet$c3 = stock.balanceSheet['cash']) === null || _stock$balanceSheet$c3 === void 0 ? void 0 : _stock$balanceSheet$c3.raw;\n  let totalDebt = (_stock$quoteSummary$f = stock.quoteSummary.financialData[\"totalDebt\"]['raw']) !== null && _stock$quoteSummary$f !== void 0 ? _stock$quoteSummary$f : stock.balanceSheet['longTermDebt']['raw'] + stock.balanceSheet['shortLongTermDebt']['raw'] + stock.balanceSheet['accountsPayable']['raw'] - stock.balanceSheet['cash']['raw'];\n  //console.log(\"total debt:\", totalDebt)\n\n  let USRiskFreePremium = 2.81; // magic...\n\n  // Beta\n  let beta = (_stock$quoteSummary$d = stock.quoteSummary.defaultKeyStatistics) === null || _stock$quoteSummary$d === void 0 ? void 0 : (_stock$quoteSummary$d2 = _stock$quoteSummary$d.beta) === null || _stock$quoteSummary$d2 === void 0 ? void 0 : _stock$quoteSummary$d2.fmt; // ?? custom beta\n  //console.log('beta:', beta);\n\n  // rate of return \n  let {\n    timestamp,\n    indicators\n  } = stock.stockChart;\n  let adjclose = (_indicators$adjclose$ = indicators.adjclose[0].adjclose) !== null && _indicators$adjclose$ !== void 0 ? _indicators$adjclose$ : indicators.adjclose;\n  let firstClose = {\n    time: moment.unix(timestamp.at(0)),\n    value: adjclose.at(0)\n  };\n  let lastClose = {\n    time: moment.unix(timestamp.at(-1)),\n    value: adjclose.at(-1)\n  };\n  let timeSpan = lastClose.time.diff(firstClose.time, 'years', true).toFixed(2);\n  let rateOfReturn = (Math.pow(lastClose.value / firstClose.value, 1 / timeSpan) - 1) * 100;\n  //console.log('ror', rateOfReturn)\n\n  let costOfEquity = USRiskFreePremium + beta * rateOfReturn;\n\n  //console.log('cost of equity:', costOfEquity);\n  let interesetRate = 2.30;\n  let equityAndDebt = totalEquity + totalDebt;\n  let equityProportion = totalEquity / equityAndDebt;\n  let debtProportion = totalDebt / equityAndDebt;\n  let proportionalCostOfEquity = equityProportion * costOfEquity;\n  let proportionalCostOfDebt = debtProportion * interesetRate;\n  let WACC = proportionalCostOfEquity + proportionalCostOfDebt;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(StyledCardContent, {\n      $expand: expand,\n      children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n        theme: theme,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            paddingX: '6%',\n            marginY: '3%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            children: \" The Weighted Average Cost of Capital \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              paddingX: '2%',\n              marginY: '1%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: \" The Weighted Average Cost of Capital (WACC) is a measure of how is the money raised going to cost a company. It is often used an internal measurement for a company to figure out whether it will be profitable to invest in a project. However, it is also used by investor who want to know the state of a company.  \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" The formula for the WACC is: \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"WACC = (% Proportion of Equity * Cost of Equity) + (% Proportion of Debt * Cost of Debt * (1 - Tax Rate))\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 67\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" Where the \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Proportion of Equity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 48\n              }, this), \" is the amount of equity that the company has in relation to Equity + Debt \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" The \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Proportion of Debt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 42\n              }, this), \" is the amount of Debt that the company has in relation to Equity + Debt \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" The \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Cost of Equity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 42\n              }, this), \" is the current value of stock\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" The \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Cost of Debt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 42\n              }, this), \" is the interest on the borrowed money \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" The \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Tax Rate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 42\n              }, this), \" is how high are the taxes for thr debt\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: \" The proportion of equity and proportion of debt are found by dividing the total assets of a company by each respective account.  \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: \" Thus the Proportion of Debt = Total Assets / Total Debt \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: \" Thus the Proportion of Equity = Total Assets / Total equity \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: \" Since all assets are financed via equity or debt, total equity plus total liabilities should equal 100%. This assumes any operating liabilities like accounts payable are excluded.  \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Step 1: Determine the debt-to-equity proportions. \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 38\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: \" This can be determined by dividing the Total Equity by the Total Equity and the Total Debt like so: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" Total Equity / (Total Equity + the Total Debt). In the case of \", stock.shortname, \" we know that the total equity is the total Assets: \", totalAssets, \" - the total liabilities: \", totalLiab, \" = \", totalEquity, \"  \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" Total debt can be found by the formula by adding the long term debt(\", longTermDebt, \") and the short term debt (\", shortTermDebt, \") minus the cash (\", cash, \") = \", totalDebt, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" Now that we have the Total Debt (\", totalDebt, \") and the total Equity (\", totalEquity, \") we can calcualte the proportions of each by the formula: \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" Equity Proportion = Total Equity (\", totalEquity, \") / Total Equity + Total Debt (\", equityAndDebt, \") = \", equityProportion.toFixed(4), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" Debt Proportion = Total Debt (\", totalDebt, \") / Total Equity + Total Debt (\", equityAndDebt, \") = \", debtProportion.toFixed(4), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Step 2: Determine the Cost of Equity: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 38\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: \" Not all companies pay off dividends, thus the usual way of calculating the Cost Of Equity which involve the dividents of Share / price of the stock, might not work\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: \" I have thus chosen to use the CAPM Approach: (Rate Of Return) + Beta * (Market Risk Free Rate of Return) \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" The Beta for \", stock.shortname, \" is: \", beta, \", the current risk free rate of return is: \", USRiskFreePremium, \", and the companies current rate of return is: \", rateOfReturn.toFixed(4), \"% \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" if we plug this value into the formula we find that the Cost of Equity is \", costOfEquity, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Step 3: Determine the Cost of Debt: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 38\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" I am going to use the current interest rate in the United States as the cost of debt of the company which is \", interesetRate, \" (U.S. Department of the Treasury, 2022) \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Step 4: Determine the WACC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 38\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: \" Ideally we would like to find the tax rate of the company, however I was unable to find reliable and programmable information for this website, thus we are going to only count the proportional cost of debt and the proportional cost of equity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: \" The WACC can be found by adding the Proportional Cost of Equity with the Proportional Cost of Debt \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" thus: WACC = (Debt Proportional (\", debtProportion.toFixed(4), \") * Cost of Debt (\", interesetRate.toFixed(4), \")) + (Equity Proportion (\", equityProportion.toFixed(4), \") * Cost of Equity (\", costOfEquity.toFixed(4), \")) = \", WACC.toFixed(4), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c2 = DocContent;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledCardContent\");\n$RefreshReg$(_c2, \"DocContent\");","map":{"version":3,"names":["React","moment","CardContent","Typography","createTheme","responsiveFontSizes","ThemeProvider","Box","stylize","jsxDEV","_jsxDEV","Fragment","_Fragment","StyledCardContent","_ref","theme","$expand","transition","transitions","create","duration","standard","textAlign","maxWidth","transform","width","height","_c","DocContent","_ref2","_stock$balanceSheet$l","_stock$balanceSheet$s","_stock$balanceSheet$c","_stock$balanceSheet$c2","_stock$balanceSheet$c3","_stock$quoteSummary$f","_stock$quoteSummary$d","_stock$quoteSummary$d2","_indicators$adjclose$","expand","stocks","stock","at","totalLiab","balanceSheet","totalAssets","totalEquity","longTermDebt","raw","shortTermDebt","cash","longFmt","totalDebt","quoteSummary","financialData","USRiskFreePremium","beta","defaultKeyStatistics","fmt","timestamp","indicators","stockChart","adjclose","firstClose","time","unix","value","lastClose","timeSpan","diff","toFixed","rateOfReturn","Math","pow","costOfEquity","interesetRate","equityAndDebt","equityProportion","debtProportion","proportionalCostOfEquity","proportionalCostOfDebt","WACC","children","sx","paddingX","marginY","variant","fileName","_jsxFileName","lineNumber","columnNumber","shortname","_c2","$RefreshReg$"],"sources":["/home/telix/movie-downloader/src/components/cardContent/WACCContent.js"],"sourcesContent":["import * as React from 'react';\nimport moment from 'moment';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { createTheme, responsiveFontSizes, ThemeProvider } from '@mui/material/styles';\nimport { Box } from '@mui/system';\nimport stylize from '../../utils/stylize'\n\nconst StyledCardContent = stylize(CardContent, ({ theme, $expand }) => ({\n  transition: theme.transitions.create(['transform', 'width', 'height'], {\n    duration: theme.transitions.duration.standard,\n  }),\n  // auto does not allow css transitions, bummer.\n  // but auto is key so tidoesnot overflow in the phone size\n  textAlign: 'left',\n  maxWidth: 1200,\n  transform: $expand ? 'scale(1)' : 'scale(0.8)',\n  width: $expand ? '80vw' : 300,\n  height: $expand ? 'auto' : 150, \n}));\n\nvar theme = createTheme();\ntheme = responsiveFontSizes(theme);\n\nexport default function DocContent({ expand, stocks }) {\n    let stock = stocks.at(0);\n\n    let totalLiab = stock.balanceSheet['totalLiab']['longFmt'];\n    let totalAssets = stock.balanceSheet['totalAssets']['longFmt'];\n    let totalEquity = stock.balanceSheet['totalAssets']['raw'] - stock.balanceSheet['totalLiab']['raw'];\n    //console.log(\"totalEquity:\", totalEquity)\n\n    let longTermDebt = stock.balanceSheet['longTermDebt']?.raw;\n    let shortTermDebt = stock.balanceSheet['shortLongTermDebt']?.raw;\n    let cash = stock.balanceSheet['cash']?.longFmt ?? stock.balanceSheet['cash']?.raw;\n    let totalDebt = stock.quoteSummary.financialData[\"totalDebt\"]['raw'] ?? (\n        stock.balanceSheet['longTermDebt']['raw'] +\n        stock.balanceSheet['shortLongTermDebt']['raw'] +\n        stock.balanceSheet['accountsPayable']['raw']\n    ) - stock.balanceSheet['cash']['raw'];\n    //console.log(\"total debt:\", totalDebt)\n\n    let USRiskFreePremium = 2.81; // magic...\n\n    // Beta\n    let beta = stock.quoteSummary.defaultKeyStatistics?.beta?.fmt // ?? custom beta\n    //console.log('beta:', beta);\n\n    // rate of return \n    let { timestamp, indicators } = stock.stockChart;\n    let adjclose = indicators.adjclose[0].adjclose ?? indicators.adjclose;\n    let firstClose = { time: moment.unix(timestamp.at(0)), value: adjclose.at(0) }\n    let lastClose = { time: moment.unix(timestamp.at(-1)), value: adjclose.at(-1) }\n    let timeSpan = lastClose.time.diff(firstClose.time, 'years', true).toFixed(2);\n    let rateOfReturn = (Math.pow((lastClose.value / firstClose.value), (1 / timeSpan)) - 1)*100\n    //console.log('ror', rateOfReturn)\n    \n    let costOfEquity = USRiskFreePremium + (beta * rateOfReturn);\n\n    //console.log('cost of equity:', costOfEquity);\n    let interesetRate = 2.30;\n\n    let equityAndDebt = totalEquity + totalDebt;\n    let equityProportion = (totalEquity / equityAndDebt);\n    let debtProportion = (totalDebt / equityAndDebt);\n\n    let proportionalCostOfEquity = (equityProportion * costOfEquity);\n    let proportionalCostOfDebt = (debtProportion *  interesetRate);\n\n    let WACC = (proportionalCostOfEquity + proportionalCostOfDebt);\n\n    return <>\n        <StyledCardContent $expand={expand}>\n            <ThemeProvider theme={theme}>\n                <Box sx={{ paddingX: '6%', marginY: '3%' }}>\n                    <Typography variant=\"h4\"> The Weighted Average Cost of Capital </Typography>\n                    <Box sx={{ paddingX: '2%', marginY: '1%' }}>\n                        <Typography > The Weighted Average Cost of Capital (WACC) is a measure of how is the money raised going to cost a company. It is often used an internal measurement for a company to figure out whether it will be profitable to invest in a project. However, it is also used by investor who want to know the state of a company.  </Typography>\n                        <Typography> The formula for the WACC is: <b>WACC = (% Proportion of Equity * Cost of Equity) + (% Proportion of Debt * Cost of Debt * (1 - Tax Rate))</b> </Typography>\n                        <Typography> Where the <b>Proportion of Equity</b> is the amount of equity that the company has in relation to Equity + Debt </Typography>\n                        <Typography> The <b>Proportion of Debt</b> is the amount of Debt that the company has in relation to Equity + Debt </Typography>\n                        <Typography> The <b>Cost of Equity</b> is the current value of stock</Typography>\n                        <Typography> The <b>Cost of Debt</b> is the interest on the borrowed money </Typography>\n                        <Typography> The <b>Tax Rate</b> is how high are the taxes for thr debt</Typography>\n                        <Typography> The proportion of equity and proportion of debt are found by dividing the total assets of a company by each respective account.  </Typography>\n                        <Typography> Thus the Proportion of Debt = Total Assets / Total Debt </Typography>\n                        <Typography> Thus the Proportion of Equity = Total Assets / Total equity </Typography>\n                        <Typography> Since all assets are financed via equity or debt, total equity plus total liabilities should equal 100%. This assumes any operating liabilities like accounts payable are excluded.  </Typography>\n                        <Typography> <b>Step 1: Determine the debt-to-equity proportions. </b> </Typography>\n                        <Typography> This can be determined by dividing the Total Equity by the Total Equity and the Total Debt like so: </Typography>\n                        <Typography> Total Equity / (Total Equity + the Total Debt). In the case of {stock.shortname} we know that the total equity is the total Assets: {totalAssets} - the total liabilities: {totalLiab} = {totalEquity}  </Typography>\n                        <Typography> Total debt can be found by the formula by adding the long term debt({longTermDebt}) and the short term debt ({shortTermDebt}) minus the cash ({cash}) = {totalDebt} </Typography>\n                        <Typography> Now that we have the Total Debt ({totalDebt}) and the total Equity ({totalEquity}) we can calcualte the proportions of each by the formula: </Typography>\n                        <Typography> Equity Proportion = Total Equity ({totalEquity}) / Total Equity + Total Debt ({equityAndDebt}) = {equityProportion.toFixed(4)} </Typography>\n                        <Typography> Debt Proportion = Total Debt ({totalDebt}) / Total Equity + Total Debt ({equityAndDebt}) = {debtProportion.toFixed(4)} </Typography>\n                        <Typography> <b>Step 2: Determine the Cost of Equity: </b> </Typography>\n                        <Typography> Not all companies pay off dividends, thus the usual way of calculating the Cost Of Equity which involve the dividents of Share / price of the stock, might not work</Typography>\n                        <Typography> I have thus chosen to use the CAPM Approach: (Rate Of Return) + Beta * (Market Risk Free Rate of Return) </Typography>\n                        <Typography> The Beta for {stock.shortname} is: {beta}, the current risk free rate of return is: {USRiskFreePremium}, and the companies current rate of return is: {rateOfReturn.toFixed(4)}% </Typography>\n                        <Typography> if we plug this value into the formula we find that the Cost of Equity is {costOfEquity} </Typography>\n                        <Typography> <b>Step 3: Determine the Cost of Debt: </b></Typography>\n                        <Typography> I am going to use the current interest rate in the United States as the cost of debt of the company which is {interesetRate} (U.S. Department of the Treasury, 2022) </Typography>\n                        <Typography> <b>Step 4: Determine the WACC</b></Typography>\n                        <Typography> Ideally we would like to find the tax rate of the company, however I was unable to find reliable and programmable information for this website, thus we are going to only count the proportional cost of debt and the proportional cost of equity</Typography>\n                        <Typography> The WACC can be found by adding the Proportional Cost of Equity with the Proportional Cost of Debt </Typography>\n                        <Typography> thus: WACC = (Debt Proportional ({debtProportion.toFixed(4)}) * Cost of Debt ({interesetRate.toFixed(4)})) + (Equity Proportion ({equityProportion.toFixed(4)}) * Cost of Equity ({costOfEquity.toFixed(4)})) = {WACC.toFixed(4)} </Typography>\n                    </Box>\n                </Box>\n            </ThemeProvider>\n        </StyledCardContent>\n    </>\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}