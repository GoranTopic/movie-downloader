{"ast":null,"code":"import axios from 'axios';\nimport { YifyService } from 'yify-api';\nconst yifyService = new YifyService();\n\n// \nconst endpoint = 'https://yts.lt/api/v2/';\n\n// server address\nlet cors_proxy = 'http://147.182.241.239:4236';\n\n// super secret token, don't share =P\nlet token = '5df54d27-26d0-43ce-aef1-34d71e0b0dbb';\nconst query_movie_suggestions = async key => {\n  const {\n    data\n  } = await axios.get(`${cors_proxy}/${endpoint}/list_movies.json`, {\n    params: {\n      query_term: key\n    },\n    headers: {\n      token\n    } // token for the cors proxy\n  });\n\n  console.log(data.data.movies);\n  if (data.status === 'ok') if (data.data.movies) return data.data.movies;else return [];\n  throw new Error(data.status_message);\n};\nconst get_torrent_url = async movie_id => await yifyService.getMovie({\n  movie_id: movie_id,\n  with_images: true\n}).then(response => {\n  let movie = response.data.movie;\n  let torrent = movie.torrents.filter(t => t.quality === '1080p')[0];\n  return torrent;\n}).catch(e => console.error(e));\nexport { query_movie_suggestions, get_torrent_url };","map":{"version":3,"names":["axios","YifyService","yifyService","endpoint","cors_proxy","token","query_movie_suggestions","key","data","get","params","query_term","headers","console","log","movies","status","Error","status_message","get_torrent_url","movie_id","getMovie","with_images","then","response","movie","torrent","torrents","filter","t","quality","catch","e","error"],"sources":["/home/telix/movie-downloader/src/yify-cli.js"],"sourcesContent":["import axios from 'axios';\nimport { YifyService } from 'yify-api';\n\nconst yifyService = new YifyService()\n\n// \nconst endpoint = 'https://yts.lt/api/v2/';\n\n// server address\nlet cors_proxy = 'http://147.182.241.239:4236';\n\n// super secret token, don't share =P\nlet token = '5df54d27-26d0-43ce-aef1-34d71e0b0dbb';\n\nconst query_movie_suggestions = async key => {\n  const { data } = await axios\n    .get(`${cors_proxy}/${endpoint}/list_movies.json`, {\n      params: { query_term: key },\n      headers: { token } // token for the cors proxy\n    })\n  console.log(data.data.movies)\n  if (data.status === 'ok')\n    if (data.data.movies)\n      return data.data.movies;\n      else \n      return []\n  throw new Error(data.status_message);\n}\n\n\nconst get_torrent_url = async movie_id =>\n  await yifyService\n    .getMovie({\n      movie_id: movie_id,\n      with_images: true\n    })\n    .then(response => {\n      let movie = response.data.movie;\n      let torrent = movie.torrents.filter(\n        t => t.quality === '1080p'\n      )[0]\n      return torrent\n    })\n    .catch(e => console.error(e))\n\n\n\nexport { query_movie_suggestions, get_torrent_url }\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,UAAU;AAEtC,MAAMC,WAAW,GAAG,IAAID,WAAW,EAAE;;AAErC;AACA,MAAME,QAAQ,GAAG,wBAAwB;;AAEzC;AACA,IAAIC,UAAU,GAAG,6BAA6B;;AAE9C;AACA,IAAIC,KAAK,GAAG,sCAAsC;AAElD,MAAMC,uBAAuB,GAAG,MAAMC,GAAG,IAAI;EAC3C,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMR,KAAK,CACzBS,GAAG,CAAE,GAAEL,UAAW,IAAGD,QAAS,mBAAkB,EAAE;IACjDO,MAAM,EAAE;MAAEC,UAAU,EAAEJ;IAAI,CAAC;IAC3BK,OAAO,EAAE;MAAEP;IAAM,CAAC,CAAC;EACrB,CAAC,CAAC;;EACJQ,OAAO,CAACC,GAAG,CAACN,IAAI,CAACA,IAAI,CAACO,MAAM,CAAC;EAC7B,IAAIP,IAAI,CAACQ,MAAM,KAAK,IAAI,EACtB,IAAIR,IAAI,CAACA,IAAI,CAACO,MAAM,EAClB,OAAOP,IAAI,CAACA,IAAI,CAACO,MAAM,CAAC,KAExB,OAAO,EAAE;EACb,MAAM,IAAIE,KAAK,CAACT,IAAI,CAACU,cAAc,CAAC;AACtC,CAAC;AAGD,MAAMC,eAAe,GAAG,MAAMC,QAAQ,IACpC,MAAMlB,WAAW,CACdmB,QAAQ,CAAC;EACRD,QAAQ,EAAEA,QAAQ;EAClBE,WAAW,EAAE;AACf,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAI;EAChB,IAAIC,KAAK,GAAGD,QAAQ,CAAChB,IAAI,CAACiB,KAAK;EAC/B,IAAIC,OAAO,GAAGD,KAAK,CAACE,QAAQ,CAACC,MAAM,CACjCC,CAAC,IAAIA,CAAC,CAACC,OAAO,KAAK,OAAO,CAC3B,CAAC,CAAC,CAAC;EACJ,OAAOJ,OAAO;AAChB,CAAC,CAAC,CACDK,KAAK,CAACC,CAAC,IAAInB,OAAO,CAACoB,KAAK,CAACD,CAAC,CAAC,CAAC;AAIjC,SAAS1B,uBAAuB,EAAEa,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}