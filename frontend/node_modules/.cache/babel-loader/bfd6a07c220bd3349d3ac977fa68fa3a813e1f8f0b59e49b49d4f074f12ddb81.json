{"ast":null,"code":"const weight_combinator = function (length) {\n  let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25;\n  console.log(\"weight_combinator started\");\n  let weights = Array(length).fill(0);\n  let last = weights.length - 1;\n  let combinations = [];\n  const total = arr => arr.reduce((t, s, i) => {\n    if (i === last) return t;else return t + s;\n  });\n  const raise_one = arr => {\n    for (var i = 0; i <= last - 1; i) {\n      arr[i]++;\n      let t = total(arr);\n      if (t > limit) {\n        arr[i] = 0;\n        if (i === last - 1) return true; //reached end\n        i++;\n      } else {\n        if (t <= limit) arr[last] = limit - t;\n        return false; // not reached end\n      }\n    }\n  };\n\n  let endReached = false;\n  while (!endReached) {\n    endReached = raise_one(weights);\n    combinations.push([...weights]);\n  }\n  console.log(\"weight_combinator ended\");\n  return combinations;\n};\n\n//weight_combinator(5, 5).map(arr => arr.map(v => v*20 )).forEach(arr => console.log(arr)) // example\nexport default weight_combinator;","map":{"version":3,"names":["weight_combinator","length","limit","arguments","undefined","console","log","weights","Array","fill","last","combinations","total","arr","reduce","t","s","i","raise_one","endReached","push"],"sources":["/home/telix/movie-downloader/src/utils/weights_combinatinos.js"],"sourcesContent":["const weight_combinator = (length, limit = 25) => {\n    console.log(\"weight_combinator started\")\n    let weights = Array(length).fill(0);\n    let last = weights.length - 1;\n    let combinations = [];\n\n    const total = arr => arr.reduce((t, s, i) => {\n        if (i === last) return t\n        else return t + s\n    });\n\n    const raise_one = arr => {\n        for (var i = 0; i <= last - 1; i) {\n            arr[i]++\n            let t = total(arr);\n            if (t > limit) {\n                arr[i] = 0;\n                if (i === last - 1) return true //reached end\n                i++;\n            } else {\n                if (t <= limit) arr[last] = limit - t;\n                return false; // not reached end\n            }\n        }\n    }\n\n    let endReached = false;\n    while (!endReached) {\n        endReached = raise_one(weights);\n        combinations.push([...weights]);\n    }\n    console.log(\"weight_combinator ended\")\n    return combinations;\n}\n\n//weight_combinator(5, 5).map(arr => arr.map(v => v*20 )).forEach(arr => console.log(arr)) // example\nexport default weight_combinator;"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,SAAAA,CAACC,MAAM,EAAiB;EAAA,IAAfC,KAAK,GAAAC,SAAA,CAAAF,MAAA,QAAAE,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EACzCE,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;EACxC,IAAIC,OAAO,GAAGC,KAAK,CAACP,MAAM,CAAC,CAACQ,IAAI,CAAC,CAAC,CAAC;EACnC,IAAIC,IAAI,GAAGH,OAAO,CAACN,MAAM,GAAG,CAAC;EAC7B,IAAIU,YAAY,GAAG,EAAE;EAErB,MAAMC,KAAK,GAAGC,GAAG,IAAIA,GAAG,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAK;IACzC,IAAIA,CAAC,KAAKP,IAAI,EAAE,OAAOK,CAAC,MACnB,OAAOA,CAAC,GAAGC,CAAC;EACrB,CAAC,CAAC;EAEF,MAAME,SAAS,GAAGL,GAAG,IAAI;IACrB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIP,IAAI,GAAG,CAAC,EAAEO,CAAC,EAAE;MAC9BJ,GAAG,CAACI,CAAC,CAAC,EAAE;MACR,IAAIF,CAAC,GAAGH,KAAK,CAACC,GAAG,CAAC;MAClB,IAAIE,CAAC,GAAGb,KAAK,EAAE;QACXW,GAAG,CAACI,CAAC,CAAC,GAAG,CAAC;QACV,IAAIA,CAAC,KAAKP,IAAI,GAAG,CAAC,EAAE,OAAO,IAAI,EAAC;QAChCO,CAAC,EAAE;MACP,CAAC,MAAM;QACH,IAAIF,CAAC,IAAIb,KAAK,EAAEW,GAAG,CAACH,IAAI,CAAC,GAAGR,KAAK,GAAGa,CAAC;QACrC,OAAO,KAAK,CAAC,CAAC;MAClB;IACJ;EACJ,CAAC;;EAED,IAAII,UAAU,GAAG,KAAK;EACtB,OAAO,CAACA,UAAU,EAAE;IAChBA,UAAU,GAAGD,SAAS,CAACX,OAAO,CAAC;IAC/BI,YAAY,CAACS,IAAI,CAAC,CAAC,GAAGb,OAAO,CAAC,CAAC;EACnC;EACAF,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACtC,OAAOK,YAAY;AACvB,CAAC;;AAED;AACA,eAAeX,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}